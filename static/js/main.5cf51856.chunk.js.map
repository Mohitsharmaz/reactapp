{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setStyle","btnText","setBtnText","className","style","id","type","onClick","Navbar","props","mode","setmode","href","title","console","log","document","body","htmlFor","Textform","text","setText","onChange","e","target","value","rows","newText","toUpperCase","toLowerCase","split","length","App","about","heading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5cf51856.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n    const [btnText, setBtnText] = useState('Enable Dark Mode')\r\n\r\n    const toggleStyle = () => {\r\n        if (myStyle.color == 'black') {\r\n            setStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setBtnText('Enable light Mode')\r\n        }\r\n        else {\r\n            setStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText('Enable Dark Mode')\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <div className=\"container\" style={myStyle} >\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button style={myStyle} className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button style={myStyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" >\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button style={myStyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <button type=\"button\" className=\"btn btn-primary m\" onClick={toggleStyle}>{btnText}</button>\r\n        </div>\r\n    </div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  const [mode, setmode] = useState(\"Dark Mode\");\r\n\r\n  const clickme = () => {\r\n    console.log(\"clicked\");\r\n    if (document.body.style.backgroundColor === \"white\") {\r\n      document.body.style.backgroundColor = \"black\";\r\n      document.body.style.color = \"white\";\r\n      setmode(\"Light Mode\");\r\n    } else {\r\n      document.body.style.backgroundColor = \"white\";\r\n      document.body.style.color = \"black\";\r\n      setmode(\"Dark Mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"/navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={clickme}\r\n              />\r\n              <label\r\n                style={{ color: \"white\" }}\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                {mode}\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\n\r\n\r\nexport default function Textform(props) {\r\n    let [text, setText] = useState('')\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n    }\r\n    const handleonchange = (e) => {\r\n        setText(e.target.value)\r\n    }\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = \" \"\r\n        setText(newText)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className='container' >\r\n                <h1>Enter The Text To Analyse</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea\r\n                        onChange={handleonchange}\r\n                        value={text}\r\n                        className=\"form-control\"\r\n                        id=\"exampleFormControlTextarea1\"\r\n                        rows=\"8\"\r\n                    ></textarea>\r\n                </div>\r\n                <button onClick={handleUpClick} className=\"btn btn-primary mx-2\">Convert To Upper Case</button>\r\n\r\n                <button onClick={handleLowClick} className=\"btn btn-primary mx-2\">Convert To Lower Case</button>\r\n\r\n                <button onClick={handleClearClick} className=\"btn btn-primary\">Clear</button>\r\n\r\n\r\n\r\n            </div>\r\n            <div className=\"container my-5 mx-2\">\r\n                <h2>Your Text Summary</h2>\r\n                <p> {text.split(' ').length} words And {text.length} Character</p>\r\n                <p> {0.008 * text.split(' ').length} Minutes Read</p>\r\n                <h2>Preview</h2>\r\n                <p>\r\n\r\n                    {text}\r\n                </p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\nimport React from \"react\";\nimport reactDom from \"react-dom\";\n\n\n\nfunction App() {\n  return (\n    <>\n      <Navbar title='Text Utils' about='About TU' />\n      <div className=\"container my-5 \">\n      </div>\n\n      <About />\n\n      <Textform heading='Enter Text To Analyse' />\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}